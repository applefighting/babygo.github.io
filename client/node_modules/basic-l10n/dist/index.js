"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const isArray = Array.isArray.bind(Array);
function createL10n(l10ns, opts = {}) {
    const _l10ns = map(l10ns, function (locale, l10n) {
        const _l10n = map(l10n, function (_, t9n) {
            return isArray(t9n) ? t9n.slice() : t9n;
        });
        return function localize(keyOrStrings, ...substitutes) {
            const isKey = !isArray(keyOrStrings && keyOrStrings.raw);
            const key = isKey
                ? keyOrStrings
                : keyOrStrings.join(substitutes.length ? '%s' : '');
            const t9n = _l10n[key];
            if (process.env.NODE_ENV !== 'production') {
                assert(opts, _l10n, t9n, locale, key, isKey);
            }
            return isKey
                ? (!t9n || isArray(t9n) ? key : t9n)
                : (!t9n
                    ? String.raw(...arguments)
                    : substitute(t9n, substitutes));
        };
    });
    return _l10ns;
}
exports.default = createL10n;
function substitute(translation, substitutes) {
    const template = !isArray(translation)
        ? translation
        : getBounded(translation, substitutes[0]);
    const phrases = template.split(/%(\d+)/);
    let i = phrases.length;
    while (--i > 0) {
        const k = phrases[--i];
        phrases[i] = substitutes[k];
    }
    return phrases.join('');
}
function getBounded(arr, index) {
    const length = arr.length;
    return arr[index < length ? (index < 0 ? 0 : index) : (length - 1)];
}
function map(entries, project) {
    return Object.keys(entries).reduce(reduce, {});
    function reduce(result, key) {
        result[key] = project(key, entries[key]);
        return result;
    }
}
function assert({ debug }, translations, translation, locale, key, isKey) {
    if (!debug) {
        return;
    }
    if (!translations) {
        return debug(`WARNING: undefined localizations for locale "${locale}"`);
    }
    if (!translation) {
        return debug(`WARNING: undefined localization for locale "${locale}" and key "${key}"`);
    }
    else if (isKey && isArray(translation)) {
        return debug(`WARNING: unexpected localization type for locale "${locale}" and key "${key}"`);
    }
}
