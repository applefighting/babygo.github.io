"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dropRepeats_1 = require("xstream/extra/dropRepeats");
var adapt_1 = require("@cycle/run/lib/adapt");
function getStorage$(request$, type) {
    if (type === 'local') {
        return request$.filter(function (req) { return !req.target || req.target === 'local'; });
    }
    else {
        return request$.filter(function (req) { return req.target === 'session'; });
    }
}
function storageKey(n, request$, type) {
    if (type === void 0) { type = 'local'; }
    var storage$ = getStorage$(request$, type);
    var key = type === "local" ? localStorage.key(n) : sessionStorage.key(n);
    return storage$
        .filter(function (req) { return req.key === key; })
        .map(function (req) { return req.key; })
        .startWith(key)
        .compose(dropRepeats_1.default());
}
function storageGetItem(key, request$, type) {
    if (type === void 0) { type = 'local'; }
    var storage$ = getStorage$(request$, type);
    var storageObj = type === "local" ? localStorage : sessionStorage;
    return storage$
        .filter(function (req) { return req.key === key; })
        .map(function (req) { return req.value; })
        .startWith(storageObj.getItem(key));
}
function getResponseObj(request$, type) {
    if (type === void 0) { type = 'local'; }
    return {
        // Function returning stream of the nth key.
        key: function (n) {
            return adapt_1.adapt(storageKey(n, request$, type));
        },
        // Function returning stream of item values.
        getItem: function (key) {
            return adapt_1.adapt(storageGetItem(key, request$, type));
        },
    };
}
exports.default = getResponseObj;
